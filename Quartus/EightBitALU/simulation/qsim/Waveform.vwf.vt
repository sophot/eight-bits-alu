// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/15/2019 05:00:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    EightBitALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EightBitALU_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	A4,
	A5,
	A6,
	A7,
	B0,
	B1,
	B2,
	B3,
	B4,
	B5,
	B6,
	B7,
	Cin,
	S0,
	S1,
	S2,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  A4;
input  A5;
input  A6;
input  A7;
input  B0;
input  B1;
input  B2;
input  B3;
input  B4;
input  B5;
input  B6;
input  B7;
input  Cin;
input  S0;
input  S1;
input  S2;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or A4 or A5 or A6 or A7 or B0 or B1 or B2 or B3 or B4 or B5 or B6 or B7 or Cin or S0 or S1 or S2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module EightBitALU_vlg_check_tst (
	Cout,
	F0,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	OVR,
	sampler_rx
);
input  Cout;
input  F0;
input  F1;
input  F2;
input  F3;
input  F4;
input  F5;
input  F6;
input  F7;
input  OVR;
input sampler_rx;

reg  Cout_expected;
reg  F0_expected;
reg  F1_expected;
reg  F2_expected;
reg  F3_expected;
reg  F4_expected;
reg  F5_expected;
reg  F6_expected;
reg  F7_expected;
reg  OVR_expected;

reg  Cout_prev;
reg  F0_prev;
reg  F1_prev;
reg  F2_prev;
reg  F3_prev;
reg  F4_prev;
reg  F5_prev;
reg  F6_prev;
reg  F7_prev;
reg  OVR_prev;

reg  Cout_expected_prev;
reg  F0_expected_prev;
reg  F1_expected_prev;
reg  F2_expected_prev;
reg  F3_expected_prev;
reg  F4_expected_prev;
reg  F5_expected_prev;
reg  F6_expected_prev;
reg  F7_expected_prev;
reg  OVR_expected_prev;

reg  last_Cout_exp;
reg  last_F0_exp;
reg  last_F1_exp;
reg  last_F2_exp;
reg  last_F3_exp;
reg  last_F4_exp;
reg  last_F5_exp;
reg  last_F6_exp;
reg  last_F7_exp;
reg  last_OVR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	F0_prev = F0;
	F1_prev = F1;
	F2_prev = F2;
	F3_prev = F3;
	F4_prev = F4;
	F5_prev = F5;
	F6_prev = F6;
	F7_prev = F7;
	OVR_prev = OVR;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	F0_expected_prev = F0_expected;
	F1_expected_prev = F1_expected;
	F2_expected_prev = F2_expected;
	F3_expected_prev = F3_expected;
	F4_expected_prev = F4_expected;
	F5_expected_prev = F5_expected;
	F6_expected_prev = F6_expected;
	F7_expected_prev = F7_expected;
	OVR_expected_prev = OVR_expected;
end



// expected F7
initial
begin
	F7_expected = 1'bX;
	F7_expected = #999000 1'b0;
end 

// expected F6
initial
begin
	F6_expected = 1'bX;
	F6_expected = #999000 1'b0;
end 

// expected F5
initial
begin
	F5_expected = 1'bX;
	F5_expected = #999000 1'b0;
end 

// expected F4
initial
begin
	F4_expected = 1'bX;
	F4_expected = #999000 1'b0;
end 

// expected F3
initial
begin
	F3_expected = 1'bX;
	F3_expected = #999000 1'b0;
end 

// expected F2
initial
begin
	F2_expected = 1'bX;
	F2_expected = #999000 1'b0;
end 

// expected F1
initial
begin
	F1_expected = 1'bX;
	F1_expected = #999000 1'b0;
end 

// expected F0
initial
begin
	F0_expected = 1'bX;
	F0_expected = #999000 1'b0;
end 

// expected Cout
initial
begin
	Cout_expected = 1'bX;
	Cout_expected = #999000 1'b0;
end 

// expected OVR
initial
begin
	OVR_expected = 1'bX;
	OVR_expected = #999000 1'b0;
end 
// generate trigger
always @(Cout_expected or Cout or F0_expected or F0 or F1_expected or F1 or F2_expected or F2 or F3_expected or F3 or F4_expected or F4 or F5_expected or F5 or F6_expected or F6 or F7_expected or F7 or OVR_expected or OVR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected F0 = %b | expected F1 = %b | expected F2 = %b | expected F3 = %b | expected F4 = %b | expected F5 = %b | expected F6 = %b | expected F7 = %b | expected OVR = %b | ",Cout_expected_prev,F0_expected_prev,F1_expected_prev,F2_expected_prev,F3_expected_prev,F4_expected_prev,F5_expected_prev,F6_expected_prev,F7_expected_prev,OVR_expected_prev);
	$display("| real Cout = %b | real F0 = %b | real F1 = %b | real F2 = %b | real F3 = %b | real F4 = %b | real F5 = %b | real F6 = %b | real F7 = %b | real OVR = %b | ",Cout_prev,F0_prev,F1_prev,F2_prev,F3_prev,F4_prev,F5_prev,F6_prev,F7_prev,OVR_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( F0_expected_prev !== 1'bx ) && ( F0_prev !== F0_expected_prev )
		&& ((F0_expected_prev !== last_F0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F0_expected_prev);
		$display ("     Real value = %b", F0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F0_exp = F0_expected_prev;
	end
	if (
		( F1_expected_prev !== 1'bx ) && ( F1_prev !== F1_expected_prev )
		&& ((F1_expected_prev !== last_F1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F1_exp = F1_expected_prev;
	end
	if (
		( F2_expected_prev !== 1'bx ) && ( F2_prev !== F2_expected_prev )
		&& ((F2_expected_prev !== last_F2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F2_expected_prev);
		$display ("     Real value = %b", F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_F2_exp = F2_expected_prev;
	end
	if (
		( F3_expected_prev !== 1'bx ) && ( F3_prev !== F3_expected_prev )
		&& ((F3_expected_prev !== last_F3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F3_expected_prev);
		$display ("     Real value = %b", F3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F3_exp = F3_expected_prev;
	end
	if (
		( F4_expected_prev !== 1'bx ) && ( F4_prev !== F4_expected_prev )
		&& ((F4_expected_prev !== last_F4_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F4_expected_prev);
		$display ("     Real value = %b", F4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_F4_exp = F4_expected_prev;
	end
	if (
		( F5_expected_prev !== 1'bx ) && ( F5_prev !== F5_expected_prev )
		&& ((F5_expected_prev !== last_F5_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F5_expected_prev);
		$display ("     Real value = %b", F5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_F5_exp = F5_expected_prev;
	end
	if (
		( F6_expected_prev !== 1'bx ) && ( F6_prev !== F6_expected_prev )
		&& ((F6_expected_prev !== last_F6_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F6_expected_prev);
		$display ("     Real value = %b", F6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_F6_exp = F6_expected_prev;
	end
	if (
		( F7_expected_prev !== 1'bx ) && ( F7_prev !== F7_expected_prev )
		&& ((F7_expected_prev !== last_F7_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F7_expected_prev);
		$display ("     Real value = %b", F7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_F7_exp = F7_expected_prev;
	end
	if (
		( OVR_expected_prev !== 1'bx ) && ( OVR_prev !== OVR_expected_prev )
		&& ((OVR_expected_prev !== last_OVR_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVR_expected_prev);
		$display ("     Real value = %b", OVR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OVR_exp = OVR_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#8000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module EightBitALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg A4;
reg A5;
reg A6;
reg A7;
reg B0;
reg B1;
reg B2;
reg B3;
reg B4;
reg B5;
reg B6;
reg B7;
reg Cin;
reg S0;
reg S1;
reg S2;
// wires                                               
wire Cout;
wire F0;
wire F1;
wire F2;
wire F3;
wire F4;
wire F5;
wire F6;
wire F7;
wire OVR;

wire sampler;                             

// assign statements (if any)                          
EightBitALU i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.Cin(Cin),
	.Cout(Cout),
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.F5(F5),
	.F6(F6),
	.F7(F7),
	.OVR(OVR),
	.S0(S0),
	.S1(S1),
	.S2(S2)
);

// Cin
initial
begin
	Cin = 1'b1;
	Cin = #2000000 1'b0;
	Cin = #1000000 1'b1;
	# 1000000;
	repeat(2)
	begin
		Cin = 1'b0;
		Cin = #1000000 1'b1;
		# 1000000;
	end
end 

// A7
initial
begin
	A7 = 1'b1;
	A7 = #4000000 1'b0;
end 

// A6
initial
begin
	A6 = 1'b1;
	A6 = #2000000 1'b0;
	A6 = #2000000 1'b1;
	A6 = #2000000 1'b0;
end 

// A5
initial
begin
	A5 = 1'b1;
	A5 = #1000000 1'b0;
	A5 = #1000000 1'b1;
	A5 = #1000000 1'b0;
	A5 = #1000000 1'b1;
	A5 = #1000000 1'b0;
	A5 = #1000000 1'b1;
	A5 = #1000000 1'b0;
end 

// A4
initial
begin
	A4 = 1'b1;
end 

// A3
initial
begin
	A3 = 1'b1;
end 

// A2
initial
begin
	A2 = 1'b1;
	A2 = #2000000 1'b0;
	A2 = #2000000 1'b1;
end 

// A1
initial
begin
	A1 = 1'b1;
	A1 = #4000000 1'b0;
	A1 = #2000000 1'b1;
end 

// A0
always
begin
	A0 = 1'b0;
	A0 = #1000000 1'b1;
	# 1000000;
	repeat(3)
	begin
		A0 = 1'b0;
		A0 = #1000000 1'b1;
		# 1000000;
	end
	#0;
end 

// B7
initial
begin
	B7 = 1'b0;
	B7 = #1000000 1'b1;
end 

// B6
initial
begin
	B6 = 1'b1;
	B6 = #1000000 1'b0;
end 

// B5
initial
begin
	B5 = 1'b1;
	B5 = #1000000 1'b0;
end 

// B4
initial
begin
	B4 = 1'b1;
	B4 = #1000000 1'b0;
end 

// B3
initial
begin
	B3 = 1'b1;
	B3 = #1000000 1'b0;
end 

// B2
initial
begin
	B2 = 1'b1;
	B2 = #1000000 1'b0;
	B2 = #3000000 1'b1;
end 

// B1
initial
begin
	B1 = 1'b1;
	B1 = #1000000 1'b0;
	B1 = #1000000 1'b1;
	B1 = #2000000 1'b0;
	B1 = #2000000 1'b1;
end 

// B0
initial
begin
	B0 = 1'b1;
	B0 = #2000000 1'b0;
	B0 = #1000000 1'b1;
	B0 = #1000000 1'b0;
	B0 = #1000000 1'b1;
	B0 = #1000000 1'b0;
	B0 = #1000000 1'b1;
end 

// S0
initial
begin
	S0 = 1'b0;
end 

// S1
initial
begin
	S1 = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 

EightBitALU_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.Cin(Cin),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.sampler_tx(sampler)
);

EightBitALU_vlg_check_tst tb_out(
	.Cout(Cout),
	.F0(F0),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.F5(F5),
	.F6(F6),
	.F7(F7),
	.OVR(OVR),
	.sampler_rx(sampler)
);
endmodule

